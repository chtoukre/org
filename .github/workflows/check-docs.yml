name: Docs Update Guard

on:
  workflow_call:

jobs:
  check-docs-updated:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history for diff)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine diff range
        id: range
        run: |
          AFTER="${GITHUB_SHA}"
          BEFORE="$(jq -r '.before' < "$GITHUB_EVENT_PATH")"

          # Case of first commits (branch CREATE): before = 0000...
          if [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            # If this is the very first commit, skip (no base to compare against)
            if [ "$(git rev-list --count "$AFTER")" -eq 1 ]; then
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            else
              # Take the direct parent of the current commit
              BEFORE="$(git rev-parse "${AFTER}^")"
            fi
          fi

          echo "before=$BEFORE" >> $GITHUB_OUTPUT
          echo "after=$AFTER"  >> $GITHUB_OUTPUT

      - name: Skip early if no range
        if: steps.range.outputs.skip == 'true'
        run: echo "No previous commit to compare against; skipping."

      - name: Compute changed files
        id: changes
        if: steps.range.outputs.skip != 'true'
        run: |
          BEFORE="${{ steps.range.outputs.before }}"
          AFTER="${{ steps.range.outputs.after }}"

          git diff --name-only "$BEFORE" "$AFTER" > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt

          # Source change flags
          if grep -qE '^apps/' changed_files.txt; then echo "apps_changed=1" >> $GITHUB_OUTPUT; else echo "apps_changed=0" >> $GITHUB_OUTPUT; fi
          if grep -qE '^infra/' changed_files.txt; then echo "infra_changed=1" >> $GITHUB_OUTPUT; else echo "infra_changed=0" >> $GITHUB_OUTPUT; fi
          if grep -qx 'version.txt' changed_files.txt; then echo "version_changed=1" >> $GITHUB_OUTPUT; else echo "version_changed=0" >> $GITHUB_OUTPUT; fi

          # Documentation change flags
          if grep -qx 'docs/apps.md' changed_files.txt;  then echo "docs_apps_changed=1"  >> $GITHUB_OUTPUT; else echo "docs_apps_changed=0"  >> $GITHUB_OUTPUT; fi
          if grep -qx 'docs/infra.md' changed_files.txt; then echo "docs_infra_changed=1" >> $GITHUB_OUTPUT; else echo "docs_infra_changed=0" >> $GITHUB_OUTPUT; fi
          if grep -qx 'docs/version.md' changed_files.txt; then echo "docs_version_changed=1" >> $GITHUB_OUTPUT; else echo "docs_version_changed=0" >> $GITHUB_OUTPUT; fi

      - name: Enforce docs updates
        if: steps.range.outputs.skip != 'true'
        run: |
          missing=0
          msgs=()

          apps_changed="${{ steps.changes.outputs.apps_changed }}"
          infra_changed="${{ steps.changes.outputs.infra_changed }}"
          version_changed="${{ steps.changes.outputs.version_changed }}"

          docs_apps_changed="${{ steps.changes.outputs.docs_apps_changed }}"
          docs_infra_changed="${{ steps.changes.outputs.docs_infra_changed }}"
          docs_version_changed="${{ steps.changes.outputs.docs_version_changed }}"

          # Enforcement rules
          if [ "$apps_changed" = "1" ] && [ "$docs_apps_changed" = "0" ]; then
            msgs+=("Documentation not updated: 'docs/apps.md' was not modified while 'apps/**' changed.")
            missing=1
          fi

          if [ "$infra_changed" = "1" ] && [ "$docs_infra_changed" = "0" ]; then
            msgs+=("Documentation not updated: 'docs/infra.md' was not modified while 'infra/**' changed.")
            missing=1
          fi

          if [ "$version_changed" = "1" ] && [ "$docs_version_changed" = "0" ]; then
            msgs+=("Documentation not updated: 'docs/version.md' was not modified while 'version.txt' changed.")
            missing=1
          fi

          if [ $missing -eq 1 ]; then
            echo "❌ Failure: the documentation related to the changes has not been updated."
            printf '%s\n' "${msgs[@]}"
            exit 1
          else
            echo "✅ OK: documentation updated (or no changes requiring an update)."
          fi

